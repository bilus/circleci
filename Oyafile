# -*- mode: yaml -*-

Project: example

Changeset: |
  crnt_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$crnt_branch" != "master" ]]; then
    # TODO: Make master configurable.
    git branch -f master origin/master
    compare_to=master
  else
    last_sha_var="OYA_LAST_SUCCESS_SHA"
    last_sha="${!last_sha_var}"
    if [ -z "${last_sha}" ]; then
      empty_tree=4b825dc642cb6eb9a060e54bf8d69288fbee4904
      compare_to=${empty_tree}
    else
      compare_to=${last_sha}
    fi
  fi
  diff_tree=$(git diff-tree ${compare_to}..HEAD)
  # Directories only.
  changed_subdirs=$(echo "${diff_tree}" | awk '$1$2 ~ /04/' | cut -f2-)
  # Only files in root directory.
  changed_root=$(echo "${diff_tree}" | awk '$6 !~ /\// && $1$2 !~ /04/')
  if [ -z "${changed_subdirs}" ]; then
    if [ -n "${changed_root}" ]; then
      echo "+/"
    fi
    exit 0
  fi
  echo "${changed_subdirs}" | awk '{a="+/"$1; print a}'
  echo '+/'


onMergeSuccess: |
  set -e

  echo "Storing sha in CircleCI environment variables"

  sha=$(git rev-parse HEAD)
  curl --fail -o /dev/null -s -X POST --header "Content-Type: application/json" -d "{\"name\":\"OYA_LAST_SUCCESS_SHA\", \"value\":\"${sha}\"}" "https://circleci.com/api/v1.1/project/${Oya[vcsType]}/${Oya[username]}/${Oya[project]}/envvar?circle-token=${Oya[circleciToken]}"


init.Doc: >-
  Initialize CircleCI for the project.
init: |
  set -e


  if ! which gpg > /dev/null; then
    echo "gpg is missing; visit https://gnupg.org"
    exit 1
  fi


  # Requires repo url as the argument.

  vcs_url=$1
  if [ -z "${vcs_url}" ]; then
    oya run initUsage
    exit 1
  fi

  # Requires personal API token.

  api_token=${Oya[Flags.token]:-${CIRCLECI_TOKEN}}
  if [ -z "${api_token}" ]; then
    oya run initUsage
    exit 1
  fi

  # Follow the repo.

  echo "Asking CircleCI to follow ${vcs_url}"

  if [[ $vcs_url =~ "github.com" ]]; then
    vcs_type=gh
  elif [[ $vcs_url =~ "bitbucket.org" ]]; then
    vcs_type=bb
  else
    echo "CircleCI supports only Github and Bitbucket"
    oya run initUsage
    exit 2
  fi

  project=`basename "${vcs_url}"`
  username=`basename "$(dirname \"${vcs_url}\")"`
  curl --fail -o /dev/null -s -X POST https://circleci.com/api/v1.1/project/${vcs_type}/${username}/${project}/follow?circle-token=${api_token}

  # Generate and upload a PGP key for encrypting Oya secrets.

  echo "Generating PGP key and .sops.yaml"
  private_key=$(oya secrets init --type pgp --name "CircleCI" --email "circleci@localhost" --format json | jq -r '.private_key')

  echo "Uploading PGP key to CircleCI"
  curl --fail -o /dev/null -s -X POST --header "Content-Type: application/json" -d "{\"name\":\"PGP_KEY\", \"value\":\"${private_key}\"}" "https://circleci.com/api/v1.1/project/${vcs_type}/${username}/${project}/envvar?circle-token=${api_token}"

  # Generate circleci.oya

  echo "Generating and encrypting circleci.oya"
  printf "circleci:\n  vcsType: ${vcs_type}\n  username: ${username}\n  project: ${project}\n  circleciToken: ${api_token}\n" > "circleci.oya"
  oya secrets encrypt circleci.oya

  echo "Generating CircleCI config"

  oya render ${Oya[BasePath]}/.circleci --output-dir ./.circleci/

  echo
  echo "*******************************************************************************"
  echo "* Success!"
  echo "*******************************************************************************"
  echo
  echo Additional steps:
  echo
  echo "1) Add onMerge and onPush targets to Oyafile:"
  echo
  echo "onMerge: |"
  echo "  echo \"Releasing after merging to master\""
  echo
  echo "onPush: |"
  echo "  echo \"Testing after pushing to feature branch\""
  echo
  echo
  echo "2) Put Oyafile, .circleci/, circleci.oya, and .sops.yaml under git control:"
  echo
  echo git add Oyafile .circleci circleci.oya .sops.yaml
  echo git commit -m \"Integrate with CircleCI.\"




initUsage: |
  echo "Required argument: <vcs_url>"
  echo
  echo "To authorize access to CircleCI pass a Personal API token either using the --token=<circleci-token> flag or by setting CIRCLECI_TOKEN environment variable."
  echo
  echo "Example usage:"
  echo
  echo "   oya run circleci.init https://github.com/tooploox/oya --token=1234567890"
  echo
  echo "   CIRCLECI_TOKEN=1234567890 oya run circleci.init github.com/me/project1"

latest: |
  set -e
  crnt_branch=$(git rev-parse --abbrev-ref HEAD)
  echo $(curl --fail -s "https://circleci.com/api/v1.1/project/${Oya[vcsType]}/${Oya[username]}/${Oya[project]}?circle-token=${Oya[circleciToken]}" | jq "sort_by(.start_time) | reverse | [.[] | select(.branch == \"${crnt_branch}\")][0] // empty")

open.Doc: >-
  Open the latest CircleCI build for the current branch.
open: |
  set -e
  latest=$(oya run latest)
  if [ -n "$latest" ]; then
    open $(echo $latest | jq -r '.build_url')
  else
    echo "No CircleCI build found for the current branch"
  fi

logs.Doc: >-
  Show available CircleCI output logs for the latest build
  for the current branch.
logs: |
  set -e
  latest=$(oya run latest)
  if [ -n "$latest" ]; then
    build_num=$(echo $latest | jq -r '.build_num')
    actions=$(curl --fail -s "https://circleci.com/api/v1.1/project/${Oya[vcsType]}/${Oya[username]}/${Oya[project]}/${build_num}?circle-token=${Oya[circleciToken]}" | jq -r '.steps[] | select(.actions | select( .[])) | .actions[] | select(.has_output)' )
    log_urls=$(echo "$actions" | jq -r ".output_url")
    for log_url in $log_urls; do
      if [ "$log_url" != "null" ]; then
        curl --fail -s "$log_url" | gzip -dc | jq -r '.[] | .message'
      fi
    done
  else
    echo "No CircleCI build found for the current branch"
  fi


show.Doc: >-
  Show basic information about the latest CircleCI build
  for the current branch.
show: |
  set -e
  latest=$(oya run latest)
  if [ -n "$latest" ]; then
    title="Build $(echo $latest | jq -r '.build_num')"
    echo "$title"
    echo "$(echo $title | sed 's/./\=/g')"
    echo "URL: $(echo $latest | jq -r '.build_url')"
    echo "Started: $(echo $latest | jq -r '.start_time')"
    echo "Status: $(echo $latest | jq -r '.status')"
  else
    echo "No CircleCI build found for the current branch"
  fi

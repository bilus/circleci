# -*- mode: yaml -*-

Project: example

Changeset: |
  crnt_branch=$(git rev-parse --abbrev-ref HEAD)
  if [[ "$crnt_branch" != "master" ]]; then
    # TODO: Make master configurable.
    git branch -f master origin/master
    compare_to=master
  else
    last_sha_var="OYA_LAST_SUCCESS_SHA_${CIRCLE_PROJECT_REPONAME}"
    last_sha="${!last_sha_var}"
    if [ -z "${last_sha}" ]; then
      empty_tree=4b825dc642cb6eb9a060e54bf8d69288fbee4904
      compare_to=${empty_tree}
    else
      compare_to=${last_sha}
    fi
  fi
  diff_tree=$(git diff-tree ${compare_to}..HEAD)
  # Directories only.
  changed_subdirs=$(echo "${diff_tree}" | awk '$1$2 ~ /04/' | cut -f2-)
  # Only files in root directory.
  changed_root=$(echo "${diff_tree}" | awk '$6 !~ /\// && $1$2 !~ /04/')
  if [ -z "${changed_subdirs}" ]; then
    if [ -n "${changed_root}" ]; then
      echo "+/"
    fi
    exit 0
  fi
  echo "${changed_subdirs}" | awk '{a="+/"$1; print a}'
  echo '+/'

onPush: |
  echo "Pushed to branch"

onMerge: |
  echo "Building master"


onMergeSuccess: |
  echo "Storing sha in CircleCI environment variables"
  curl -X POST --header "Content-Type: application/json" -d "{\"name\":\"OYA_LAST_SUCCESS_SHA_${CIRCLE_PROJECT_REPONAME}\", \"value\":\"${CIRCLE_SHA1}\"}" "https://circleci.com/api/v1.1/project/${Oya[vcsType]}/${Oya[username]}/${Oya[project]}/envvar?circle-token=${Oya[circleciToken]}"


init: |
  set -e

  # Requires personal API token to be passed as the first argument.
  api_token=$1
  if [ -z "${api_token}" ]; then
    oya run initUsage
    exit 1
  fi

  # Requires a repo url as the second argument.
  # Example: https://github.com/tooploox/oya or github.com/tooploox/oya
  vcs_url=$2
  if [ -z "${vcs_url}" ]; then
    oya run initUsage
    exit 1
  fi

  # Follow the repo.
  if [[ $vcs_url =~ "github.com" ]]; then
    vcs_type=gh
  elif [[ $vcs_url =~ "bitbucket.org" ]]; then
    vcs_type=bb
  else
    echo "CircleCI supports only Github and Bitbucket"
    oya run initUsage
    exit 2
  fi

  echo "Asking CircleCI to follow ${vcs_url}"
  project=`basename "${vcs_url}"`
  username=`basename "$(dirname \"${vcs_url}\")"`
  curl -X POST https://circleci.com/api/v1.1/project/${vcs_type}/${username}/${project}/follow?circle-token=${api_token}

  # Generate and upload a PGP key for encrypting Oya secrets.

  echo "Generating PGP key and .sops.yml"
  private_key=$(oya secrets init --type pgp --name "CircleCI" --format json | jq -r '.private_key')

  echo "Uploading PGP key to CircleCI"
  curl -X POST --header "Content-Type: application/json" -d "{\"name\":\"PGP_KEY\", \"value\":\"${private_key}\"}" "https://circleci.com/api/v1.1/project/${vcs_type}/${username}/${project}/envvar?circle-token=${api_token}"

  echo "Generating circleci.oya"
  printf "vcsType: ${vcs_type}\nusername: ${username}\nproject: ${project}\ncircleciToken: ${api_token}\n" > "circleci.oya"
  oya secrets encrypt circleci.oya

  echo "Now put circleci.oya and .sops.yaml under git control and push to origin"

initUsage: |
  echo "Required arguments: <circleci-token> <vcs_url>"
  echo "Example 1234567890aabbccddeeff https://github.com/tooploox/oya"




# TODO for Oya
#   Way to suppress verbose errors
#   Way to replace variables `oya patch circleci.oya --set foo=bar,baz=qux

# Ideas: https://discuss.circleci.com/t/how-do-i-download-output-logs/12563/6

test: |
  set -e
  aa=uu
  if test "$aa" == ""; then
      echo "exiting"
      # exit 1
  fi
  rm satuhsatueh
  echo "after"
